generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID             String             @id @default(uuid())
  firstName          String             @db.VarChar(25)
  middleName         String?            @db.VarChar(25)
  lastName           String             @db.VarChar(25)
  isAdmin            Boolean
  isActive           Boolean
  emails             Email?
  passwords          Password?
  resetTokens        ResetToken?
  verificationTokens VerificationToken?
}

model Email {
  emailID String @id @default(uuid())
  userID  String @unique
  email   String @unique @db.VarChar(50)
  user    User   @relation(fields: [userID], references: [userID])
}

model Password {
  passwordID String @id @default(uuid())
  userID     String @unique
  password   String @db.VarChar(80)
  user       User   @relation(fields: [userID], references: [userID])
}

model ResetToken {
  resetTokenID      String    @id @default(uuid())
  userID            String    @unique
  resetToken        String?   @db.VarChar(191)
  resetTokenExpires DateTime?
  user              User      @relation(fields: [userID], references: [userID])
}

model VerificationToken {
  verificationTokenID      String    @id @default(uuid())
  userID                   String    @unique
  verificationToken        String    @db.VarChar(191)
  verificationTokenExpires DateTime?
  user                     User      @relation(fields: [userID], references: [userID])
}

model Faculty {
  facultyID       String        @id @default(uuid())
  employeeNumber  String?       @unique
  firstName       String
  middleName      String?
  lastName        String
  courseProgramID String
  rank            String
  CourseProgram   CourseProgram @relation(fields: [courseProgramID], references: [courseProgramID])
  schedules       Schedule[]
}

model Room {
  roomID     String     @id @default(uuid())
  roomNumber String     @unique
  type       String
  schedules  Schedule[]
}

model CourseProgram {
  courseProgramID String          @id @default(uuid())
  courseCode      String          @unique
  courseProgram   String          @unique
  faculties       Faculty[]
  sectionCourses  SectionCourse[]
}

model Section {
  sectionID      String          @id @default(uuid())
  sectionName    String          @unique
  sectionCourses SectionCourse[]
}

model SectionCourse {
  SectionCourseID String        @id @default(uuid())
  sectionID       String
  courseProgramID String
  schedules       Schedule[]
  courseProgram   CourseProgram @relation(fields: [courseProgramID], references: [courseProgramID])
  section         Section       @relation(fields: [sectionID], references: [sectionID])
}

model Subject {
  subjectID     String     @id @default(uuid())
  subjectName   String     @unique
  subjectCode   String     @unique
  numberOfUnits Int
  schedules     Schedule[]
}

model Schedule {
  scheduleID      String        @id @default(uuid())
  facultyID       String
  roomID          String
  subjectID       String
  academicYearID  String
  day             Int
  timeStart       DateTime
  timeEnd         DateTime
  semester        SemesterEnum
  sectionCourseID String
  academicYear    AcademicYear  @relation(fields: [academicYearID], references: [academicYearID])
  faculty         Faculty       @relation(fields: [facultyID], references: [facultyID])
  room            Room          @relation(fields: [roomID], references: [roomID])
  sectionCourse   SectionCourse @relation(fields: [sectionCourseID], references: [SectionCourseID])
  subject         Subject       @relation(fields: [subjectID], references: [subjectID])
}

model AcademicYear {
  academicYearID   String     @id @default(uuid())
  academicYearName String     @unique
  schedules        Schedule[]
}

enum SemesterEnum {
  First_Semester
  Second_Semester
}
